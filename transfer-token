// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Import SafeMath library to handle arithmetic operations safely
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract SimpleToken {
    using SafeMath for uint256;

    address public owner;
    string public name;
    string public symbol;
    uint8 public decimals;
    mapping(address => uint256) public balanceOf;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Mint(address indexed to, uint256 value);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    constructor(string memory _name, string memory _symbol, uint8 _decimals) {
        owner = msg.sender;
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
    }

    function transfer(address _to, uint256 _value) public {
        require(_to != address(0), "Invalid address");
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");

        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
        balanceOf[_to] = balanceOf[_to].add(_value);

        emit Transfer(msg.sender, _to, _value);
    }

    function mint(address _to, uint256 _value) public onlyOwner {
        require(_to != address(0), "Invalid address");

        // Prevent potential overflow when minting tokens
        require(balanceOf[_to].add(_value) >= balanceOf[_to], "Overflow detected");

        balanceOf[_to] = balanceOf[_to].add(_value);

        emit Mint(_to, _value);
        emit Transfer(address(0), _to, _value);
    }
}
